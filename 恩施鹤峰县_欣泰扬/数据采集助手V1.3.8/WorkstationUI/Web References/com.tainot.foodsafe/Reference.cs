//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace WorkstationUI.com.tainot.foodsafe {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wireDataServiceSoap", Namespace="http://ws.foodsafe.tongtai.com")]
    public partial class wireDataService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadCheckInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDataUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPlatformOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wireDataService() {
            this.Url = global::WorkstationUI.Properties.Settings.Default.数据采集系统_com_tainot_foodsafe_wireDataService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadCheckInfoCompletedEventHandler UploadCheckInfoCompleted;
        
        /// <remarks/>
        public event GetTicketCompletedEventHandler GetTicketCompleted;
        
        /// <remarks/>
        public event UploadCompletedEventHandler UploadCompleted;
        
        /// <remarks/>
        public event CheckDataUpCompletedEventHandler CheckDataUpCompleted;
        
        /// <remarks/>
        public event UploadPlatformCompletedEventHandler UploadPlatformCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.foodsafe.tongtai.com/UploadCheckInfo", RequestNamespace="http://ws.foodsafe.tongtai.com", ResponseNamespace="http://ws.foodsafe.tongtai.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadCheckInfo(string CheckInfoXml) {
            object[] results = this.Invoke("UploadCheckInfo", new object[] {
                        CheckInfoXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCheckInfoAsync(string CheckInfoXml) {
            this.UploadCheckInfoAsync(CheckInfoXml, null);
        }
        
        /// <remarks/>
        public void UploadCheckInfoAsync(string CheckInfoXml, object userState) {
            if ((this.UploadCheckInfoOperationCompleted == null)) {
                this.UploadCheckInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCheckInfoOperationCompleted);
            }
            this.InvokeAsync("UploadCheckInfo", new object[] {
                        CheckInfoXml}, this.UploadCheckInfoOperationCompleted, userState);
        }
        
        private void OnUploadCheckInfoOperationCompleted(object arg) {
            if ((this.UploadCheckInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCheckInfoCompleted(this, new UploadCheckInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.foodsafe.tongtai.com/GetTicket", RequestNamespace="http://ws.foodsafe.tongtai.com", ResponseNamespace="http://ws.foodsafe.tongtai.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTicket(string UserName, string Password) {
            object[] results = this.Invoke("GetTicket", new object[] {
                        UserName,
                        Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTicketAsync(string UserName, string Password) {
            this.GetTicketAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void GetTicketAsync(string UserName, string Password, object userState) {
            if ((this.GetTicketOperationCompleted == null)) {
                this.GetTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTicketOperationCompleted);
            }
            this.InvokeAsync("GetTicket", new object[] {
                        UserName,
                        Password}, this.GetTicketOperationCompleted, userState);
        }
        
        private void OnGetTicketOperationCompleted(object arg) {
            if ((this.GetTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTicketCompleted(this, new GetTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.foodsafe.tongtai.com/Upload", RequestNamespace="http://ws.foodsafe.tongtai.com", ResponseNamespace="http://ws.foodsafe.tongtai.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Upload(string Ticket, string Data) {
            object[] results = this.Invoke("Upload", new object[] {
                        Ticket,
                        Data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadAsync(string Ticket, string Data) {
            this.UploadAsync(Ticket, Data, null);
        }
        
        /// <remarks/>
        public void UploadAsync(string Ticket, string Data, object userState) {
            if ((this.UploadOperationCompleted == null)) {
                this.UploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadOperationCompleted);
            }
            this.InvokeAsync("Upload", new object[] {
                        Ticket,
                        Data}, this.UploadOperationCompleted, userState);
        }
        
        private void OnUploadOperationCompleted(object arg) {
            if ((this.UploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCompleted(this, new UploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.foodsafe.tongtai.com/CheckDataUp", RequestNamespace="http://ws.foodsafe.tongtai.com", ResponseNamespace="http://ws.foodsafe.tongtai.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckDataUp(string Ticket, string Data) {
            object[] results = this.Invoke("CheckDataUp", new object[] {
                        Ticket,
                        Data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDataUpAsync(string Ticket, string Data) {
            this.CheckDataUpAsync(Ticket, Data, null);
        }
        
        /// <remarks/>
        public void CheckDataUpAsync(string Ticket, string Data, object userState) {
            if ((this.CheckDataUpOperationCompleted == null)) {
                this.CheckDataUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDataUpOperationCompleted);
            }
            this.InvokeAsync("CheckDataUp", new object[] {
                        Ticket,
                        Data}, this.CheckDataUpOperationCompleted, userState);
        }
        
        private void OnCheckDataUpOperationCompleted(object arg) {
            if ((this.CheckDataUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDataUpCompleted(this, new CheckDataUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.foodsafe.tongtai.com/UploadPlatform", RequestNamespace="http://ws.foodsafe.tongtai.com", ResponseNamespace="http://ws.foodsafe.tongtai.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadPlatform(string Ticket, string Platform, string Data) {
            object[] results = this.Invoke("UploadPlatform", new object[] {
                        Ticket,
                        Platform,
                        Data});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadPlatformAsync(string Ticket, string Platform, string Data) {
            this.UploadPlatformAsync(Ticket, Platform, Data, null);
        }
        
        /// <remarks/>
        public void UploadPlatformAsync(string Ticket, string Platform, string Data, object userState) {
            if ((this.UploadPlatformOperationCompleted == null)) {
                this.UploadPlatformOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPlatformOperationCompleted);
            }
            this.InvokeAsync("UploadPlatform", new object[] {
                        Ticket,
                        Platform,
                        Data}, this.UploadPlatformOperationCompleted, userState);
        }
        
        private void OnUploadPlatformOperationCompleted(object arg) {
            if ((this.UploadPlatformCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPlatformCompleted(this, new UploadPlatformCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadCheckInfoCompletedEventHandler(object sender, UploadCheckInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCheckInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCheckInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void GetTicketCompletedEventHandler(object sender, GetTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadCompletedEventHandler(object sender, UploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void CheckDataUpCompletedEventHandler(object sender, CheckDataUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDataUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDataUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void UploadPlatformCompletedEventHandler(object sender, UploadPlatformCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadPlatformCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadPlatformCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591