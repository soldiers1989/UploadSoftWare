//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace AIO.NewInterface {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="dataSyncHttpBinding", Namespace="http://face.webservice.fsweb.excellence.com")]
    public partial class dataSync : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback uploadCheckDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkUserConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback downLoadBaseDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public dataSync() {
            this.Url = global::AIO.Properties.Settings.Default.DY_Detector_NewInterface_dataSync;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event uploadCheckDataCompletedEventHandler uploadCheckDataCompleted;
        
        /// <remarks/>
        public event checkUserConnectionCompletedEventHandler checkUserConnectionCompleted;
        
        /// <remarks/>
        public event downLoadBaseDataCompletedEventHandler downLoadBaseDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://face.webservice.fsweb.excellence.com", ResponseNamespace="http://face.webservice.fsweb.excellence.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string uploadCheckData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3) {
            object[] results = this.Invoke("uploadCheckData", new object[] {
                        in0,
                        in1,
                        in2,
                        in3});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadCheckDataAsync(string in0, string in1, string in2, string in3) {
            this.uploadCheckDataAsync(in0, in1, in2, in3, null);
        }
        
        /// <remarks/>
        public void uploadCheckDataAsync(string in0, string in1, string in2, string in3, object userState) {
            if ((this.uploadCheckDataOperationCompleted == null)) {
                this.uploadCheckDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadCheckDataOperationCompleted);
            }
            this.InvokeAsync("uploadCheckData", new object[] {
                        in0,
                        in1,
                        in2,
                        in3}, this.uploadCheckDataOperationCompleted, userState);
        }
        
        private void OnuploadCheckDataOperationCompleted(object arg) {
            if ((this.uploadCheckDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadCheckDataCompleted(this, new uploadCheckDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://face.webservice.fsweb.excellence.com", ResponseNamespace="http://face.webservice.fsweb.excellence.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string checkUserConnection([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1) {
            object[] results = this.Invoke("checkUserConnection", new object[] {
                        in0,
                        in1});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkUserConnectionAsync(string in0, string in1) {
            this.checkUserConnectionAsync(in0, in1, null);
        }
        
        /// <remarks/>
        public void checkUserConnectionAsync(string in0, string in1, object userState) {
            if ((this.checkUserConnectionOperationCompleted == null)) {
                this.checkUserConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckUserConnectionOperationCompleted);
            }
            this.InvokeAsync("checkUserConnection", new object[] {
                        in0,
                        in1}, this.checkUserConnectionOperationCompleted, userState);
        }
        
        private void OncheckUserConnectionOperationCompleted(object arg) {
            if ((this.checkUserConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkUserConnectionCompleted(this, new checkUserConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://face.webservice.fsweb.excellence.com", ResponseNamespace="http://face.webservice.fsweb.excellence.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public string downLoadBaseData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in0, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string in4) {
            object[] results = this.Invoke("downLoadBaseData", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void downLoadBaseDataAsync(string in0, string in1, string in2, string in3, string in4) {
            this.downLoadBaseDataAsync(in0, in1, in2, in3, in4, null);
        }
        
        /// <remarks/>
        public void downLoadBaseDataAsync(string in0, string in1, string in2, string in3, string in4, object userState) {
            if ((this.downLoadBaseDataOperationCompleted == null)) {
                this.downLoadBaseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownLoadBaseDataOperationCompleted);
            }
            this.InvokeAsync("downLoadBaseData", new object[] {
                        in0,
                        in1,
                        in2,
                        in3,
                        in4}, this.downLoadBaseDataOperationCompleted, userState);
        }
        
        private void OndownLoadBaseDataOperationCompleted(object arg) {
            if ((this.downLoadBaseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downLoadBaseDataCompleted(this, new downLoadBaseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void uploadCheckDataCompletedEventHandler(object sender, uploadCheckDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadCheckDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadCheckDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void checkUserConnectionCompletedEventHandler(object sender, checkUserConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkUserConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkUserConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void downLoadBaseDataCompletedEventHandler(object sender, downLoadBaseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downLoadBaseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downLoadBaseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591