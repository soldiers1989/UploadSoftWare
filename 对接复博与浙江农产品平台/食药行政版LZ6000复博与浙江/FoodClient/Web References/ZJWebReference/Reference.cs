//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace FoodClient.ZJWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PutSoapBinding", Namespace="http://111.1.62.181/Put.jws")]
    public partial class PutService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback saveOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveExOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveExScOperationCompleted;
        
        private System.Threading.SendOrPostCallback save_mbOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public PutService() {
            this.Url = global::FoodClient.Properties.Settings.Default.FoodClient_ZJWebReference_PutService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event saveCompletedEventHandler saveCompleted;
        
        /// <remarks/>
        public event saveExCompletedEventHandler saveExCompleted;
        
        /// <remarks/>
        public event saveExScCompletedEventHandler saveExScCompleted;
        
        /// <remarks/>
        public event save_mbCompletedEventHandler save_mbCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://DefaultNamespace", ResponseNamespace="http://111.1.62.181/Put.jws")]
        [return: System.Xml.Serialization.SoapElementAttribute("saveReturn")]
        public string save(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id) {
            object[] results1 = this.Invoke("save", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id});
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginsave(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("save", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string Endsave(System.IAsyncResult asyncResult) {
            object[] results1 = this.EndInvoke(asyncResult);
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public void saveAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id) {
            this.saveAsync(name, checkPrj, clazz, mode, dept, checker, demoId, pdtSource, cksAddr, formats, valueFmt, valueTru, oneResults, checkDate, uploadDate, factorys, factoryDate, comp, compType, macComp, cksGetDate, results, id, null);
        }
        
        /// <remarks/>
        public void saveAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id, 
                    object userState) {
            if ((this.saveOperationCompleted == null)) {
                this.saveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveOperationCompleted);
            }
            this.InvokeAsync("save", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, this.saveOperationCompleted, userState);
        }
        
        private void OnsaveOperationCompleted(object arg) {
            if ((this.saveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveCompleted(this, new saveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://DefaultNamespace", ResponseNamespace="http://111.1.62.181/Put.jws")]
        [return: System.Xml.Serialization.SoapElementAttribute("saveExReturn")]
        public string saveEx(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id) {
            object[] results1 = this.Invoke("saveEx", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id});
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsaveEx(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("saveEx", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsaveEx(System.IAsyncResult asyncResult) {
            object[] results1 = this.EndInvoke(asyncResult);
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public void saveExAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id) {
            this.saveExAsync(name, checkPrj, clazz, mode, dept, checker, demoId, pdtSource, cksAddr, formats, valueFmt, valueTru, oneResults, checkDate, uploadDate, factorys, factoryDate, comp, compType, macComp, cksGetDate, results, id, null);
        }
        
        /// <remarks/>
        public void saveExAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id, 
                    object userState) {
            if ((this.saveExOperationCompleted == null)) {
                this.saveExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveExOperationCompleted);
            }
            this.InvokeAsync("saveEx", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, this.saveExOperationCompleted, userState);
        }
        
        private void OnsaveExOperationCompleted(object arg) {
            if ((this.saveExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveExCompleted(this, new saveExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://DefaultNamespace", ResponseNamespace="http://111.1.62.181/Put.jws")]
        [return: System.Xml.Serialization.SoapElementAttribute("saveExScReturn")]
        public string saveExSc(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id) {
            object[] results1 = this.Invoke("saveExSc", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id});
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginsaveExSc(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("saveExSc", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndsaveExSc(System.IAsyncResult asyncResult) {
            object[] results1 = this.EndInvoke(asyncResult);
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public void saveExScAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id) {
            this.saveExScAsync(name, checkPrj, clazz, mode, dept, checker, demoId, pdtSource, cksAddr, formats, valueFmt, valueTru, oneResults, checkDate, uploadDate, factorys, factoryDate, comp, compType, macComp, cksGetDate, results, id, null);
        }
        
        /// <remarks/>
        public void saveExScAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    string valueFmt, 
                    string valueTru, 
                    string oneResults, 
                    System.DateTime checkDate, 
                    System.DateTime uploadDate, 
                    string factorys, 
                    System.DateTime factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    System.DateTime cksGetDate, 
                    string results, 
                    string id, 
                    object userState) {
            if ((this.saveExScOperationCompleted == null)) {
                this.saveExScOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveExScOperationCompleted);
            }
            this.InvokeAsync("saveExSc", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, this.saveExScOperationCompleted, userState);
        }
        
        private void OnsaveExScOperationCompleted(object arg) {
            if ((this.saveExScCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveExScCompleted(this, new saveExScCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://DefaultNamespace", ResponseNamespace="http://111.1.62.181/Put.jws")]
        [return: System.Xml.Serialization.SoapElementAttribute("save_mbReturn")]
        public string save_mb(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    long checkDate, 
                    long uploadDate, 
                    string factorys, 
                    long factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    long cksGetDate, 
                    string results, 
                    string id) {
            object[] results1 = this.Invoke("save_mb", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id});
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult Beginsave_mb(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    long checkDate, 
                    long uploadDate, 
                    string factorys, 
                    long factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    long cksGetDate, 
                    string results, 
                    string id, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("save_mb", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, callback, asyncState);
        }
        
        /// <remarks/>
        public string Endsave_mb(System.IAsyncResult asyncResult) {
            object[] results1 = this.EndInvoke(asyncResult);
            return ((string)(results1[0]));
        }
        
        /// <remarks/>
        public void save_mbAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    long checkDate, 
                    long uploadDate, 
                    string factorys, 
                    long factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    long cksGetDate, 
                    string results, 
                    string id) {
            this.save_mbAsync(name, checkPrj, clazz, mode, dept, checker, demoId, pdtSource, cksAddr, formats, valueFmt, valueTru, oneResults, checkDate, uploadDate, factorys, factoryDate, comp, compType, macComp, cksGetDate, results, id, null);
        }
        
        /// <remarks/>
        public void save_mbAsync(
                    string name, 
                    string checkPrj, 
                    string clazz, 
                    string mode, 
                    string dept, 
                    string checker, 
                    string demoId, 
                    string pdtSource, 
                    string cksAddr, 
                    string formats, 
                    object valueFmt, 
                    object valueTru, 
                    string oneResults, 
                    long checkDate, 
                    long uploadDate, 
                    string factorys, 
                    long factoryDate, 
                    string comp, 
                    string compType, 
                    string macComp, 
                    long cksGetDate, 
                    string results, 
                    string id, 
                    object userState) {
            if ((this.save_mbOperationCompleted == null)) {
                this.save_mbOperationCompleted = new System.Threading.SendOrPostCallback(this.Onsave_mbOperationCompleted);
            }
            this.InvokeAsync("save_mb", new object[] {
                        name,
                        checkPrj,
                        clazz,
                        mode,
                        dept,
                        checker,
                        demoId,
                        pdtSource,
                        cksAddr,
                        formats,
                        valueFmt,
                        valueTru,
                        oneResults,
                        checkDate,
                        uploadDate,
                        factorys,
                        factoryDate,
                        comp,
                        compType,
                        macComp,
                        cksGetDate,
                        results,
                        id}, this.save_mbOperationCompleted, userState);
        }
        
        private void Onsave_mbOperationCompleted(object arg) {
            if ((this.save_mbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.save_mbCompleted(this, new save_mbCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void saveCompletedEventHandler(object sender, saveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void saveExCompletedEventHandler(object sender, saveExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void saveExScCompletedEventHandler(object sender, saveExScCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveExScCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveExScCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void save_mbCompletedEventHandler(object sender, save_mbCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class save_mbCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal save_mbCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591