using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using AIO.xaml.Dialog;
using com.lvrenyang;
using DY.Process;
using DYSeriesDataSet;

namespace AIO
{
    /// <summary>
    /// SetPortWindow.xaml 的交互逻辑
    /// </summary>
    public partial class SettingsWindow : Window
    {

        #region 全局变量
        private clsttStandardDecideOpr _clsttStandardDecideOprBLL = new clsttStandardDecideOpr();
        private clsCompanyOpr _clsCompanyOprBLL = new clsCompanyOpr();
        private MsgThread _msgThread;
        //分光光度
        public DYFGDItemPara _itemFG = null;
        //胶体金
        public DYJTJItemPara _itemJT = null;
        //干化学
        public DYGSZItemPara _itemGS = null;
        //重金属
        public DYHMItemPara _itemHM = null;
        public static string[] _serialArry = new string[3];
        public static bool _checkedDown = true;
        /// <summary>
        /// _companyNum 被检单位；_yqcheckItemsNum 仪器检测项目；_checkItemsNum 检测项目；_StandardNum 检测标准；
        /// </summary>
        public Boolean DeviceIdisNull = true;
        private string CompanyTemp = string.Empty, CheckItems = string.Empty, Standard = string.Empty,
            chekcItmes = string.Empty, StandardDecideTemp = string.Empty;
        #endregion

        public SettingsWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                if (Global.EachDistrict.Equals("GS"))
                {
                    btnCheckItems.Visibility = btnCompany.Visibility = Visibility.Collapsed;
                    buttonCehckSync.Content = "国家检测标准下载";
                    buttonCehckSync.Width = 200;
                    buttonCehckSync.Margin = new Thickness(265, 0, 0, 0);
                }

                if (Global.InterfaceType.Equals("ZH") || Global.InterfaceType.Equals("ALL"))
                {
                    //唯一机器码为空时可保存
                    btn_SaveDeviceId.IsEnabled = Wisdom.DeviceID.Equals("") ? true : false;
                    tb_DeviceId.IsReadOnly = !btn_SaveDeviceId.IsEnabled;
                    if (Wisdom.DeviceID.Equals("") && DeviceIdisNull)
                    {
                        if (MessageBox.Show("唯一机器码未设置!是否立即设置？!", "操作提示", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
                        {
                            tb_DeviceId.Focus();
                        }
                    }
                    else
                        tb_DeviceId.Text = Wisdom.DeviceID;
                }
                else
                    sp_ZH.Visibility = Visibility.Collapsed;

                if (!Global.set_IsOpenFgd)
                {
                    this.skpFgdTop.Height = 0;
                    this.skpFgdC.Height = 0;
                }
                if (!Global.set_IsOpenZjs)
                    this.skpZjs.Height = 0;
                if (!Global.set_FaultDetection)
                    this.BtnCheckError.Visibility = Visibility.Collapsed;
                if (!Global.set_ShowFgd)
                    this.skpFgdC.Height = this.StackPanelLEDSettings.Height = 0;
                //配置文件处摄像头个数一般为4或2，若为其他数则视为全部摄像头都显示
                if (Global.deviceHole.SxtCount == 2)
                {
                    this.skpSxtLine2.Height = 0;
                }
                else if (Global.deviceHole.SxtCount == 0)
                {
                    //配置文件为零则表示所有摄像头都隐藏
                    this.skpSxtLine1.Height = 0;
                    this.skpSxtLine2.Height = 0;
                }
                //1表示重金属启用，0表示未启用
                if (Global.deviceHole.HmCount == 0)
                    this.skpZjs.Height = 0;
                if (Global.samplenameadapter.Count > 0)
                {
                    CheckPointInfo CPoint = Global.samplenameadapter[0];
                    textBoxServerAddr.Text = CPoint.ServerAddr;
                    textBoxRegisterID.Text = CPoint.RegisterID;
                    textBoxRegisterPassword.Password = CPoint.RegisterPassword;
                    textBoxCheckNumber.Text = CPoint.CheckPointID;
                    textBoxCheckName.Text = CPoint.CheckPointName;
                    textBoxCheckType.Text = CPoint.CheckPointType;
                    textBoxCheckOrg.Text = CPoint.Organization;
                    textCheckPlaceCode.Text = CPoint.CheckPlaceCode;
                }
                ComboBoxADPort.Text = Global.strADPORT;
                ComboBoxSXT1Port.Text = Global.strSXT1PORT;
                ComboBoxSXT2Port.Text = Global.strSXT2PORT;
                ComboBoxSXT3Port.Text = Global.strSXT3PORT;
                ComboBoxSXT4Port.Text = Global.strSXT4PORT;
                ComboBoxPRINTPort.Text = Global.strPRINTPORT;
                ComboBoxHMPort.Text = Global.strHMPORT;
                //Global.strSERVERADDR
                if (Global.set_IsOpenFgd)
                {
                    for (int i = 0; i < Global.deviceHole.HoleCount; ++i)
                    {
                        UIElement element = GenerateHoleLEDSettingUI(i);
                        StackPanelLEDSettings.Children.Add(element);
                    }
                }
                _msgThread = new MsgThread(this);
                _msgThread.Start();
            }
            catch (Exception ex)
            {
                MessageBox.Show("异常(Window_Loaded):\n" + ex.Message);
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            SaveSetting();
            _msgThread.Stop();
        }

        private void SaveSetting() 
        {
            try
            {
                SaveHoleWaveSettings();
                CheckPointInfo CPoint;
                if (Global.samplenameadapter.Count == 0)
                {
                    CPoint = new CheckPointInfo();
                }
                else
                {
                    CPoint = Global.samplenameadapter[0];
                }
                CPoint.ServerAddr = textBoxServerAddr.Text;
                CPoint.RegisterID = textBoxRegisterID.Text;
                CPoint.RegisterPassword = textBoxRegisterPassword.Password;
                CPoint.CheckPointID = textBoxCheckNumber.Text;
                CPoint.CheckPointName = textBoxCheckName.Text;
                CPoint.CheckPointType = textBoxCheckType.Text;
                CPoint.Organization = textBoxCheckOrg.Text;
                CPoint.CheckPlaceCode = textCheckPlaceCode.Text;
                if (Global.samplenameadapter.Count == 0)
                {
                    Global.samplenameadapter.Add(CPoint);
                }
                Global.SerializeToFile(Global.samplenameadapter, Global.samplenameadapterFile);
                Global.strSERVERADDR = textBoxServerAddr.Text;
                Global.strHMPORT = ComboBoxHMPort.Text;
                CFGUtils.SaveConfig("SERVERADDR", Global.strSERVERADDR);
                CFGUtils.SaveConfig("ADPORT", Global.strADPORT);
                CFGUtils.SaveConfig("SXT1PORT", Global.strSXT1PORT);
                CFGUtils.SaveConfig("SXT2PORT", Global.strSXT2PORT);
                CFGUtils.SaveConfig("SXT3PORT", Global.strSXT3PORT);
                CFGUtils.SaveConfig("SXT4PORT", Global.strSXT4PORT);
                CFGUtils.SaveConfig("PRINTPORT", Global.strPRINTPORT);
                CFGUtils.SaveConfig("HMPORT", Global.strHMPORT);
                Global.SerializeToFile(Global.deviceHole, Global.deviceHoleFile);
            }
            catch (Exception ex)
            {
                MessageBox.Show("异常(SaveSetting):\n" + ex.Message);
            }
        }

        private void ComboBoxPort_DropDownOpened(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            try
            {
                comboBoxPort.Items.Clear();
                string[] ports = System.IO.Ports.SerialPort.GetPortNames();
                if (null != ports)
                {
                    for (int i = 0; i < ports.Length; ++i)
                        comboBoxPort.Items.Add(ports[i]);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("异常(ComboBoxPort_DropDownOpened):\n" + ex.Message);
            }
        }

        private void ButtonPrev_Click(object sender, RoutedEventArgs e)
        {
            //new MainWindow().Task();
            this.Close();
        }

        private void ComboBoxADPort_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strADPORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("ADPORT", Global.strADPORT);
        }

        private void ComboBoxSXT1Port_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strSXT1PORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("SXT1PORT", Global.strSXT1PORT);
        }

        private void ComboBoxSXT2Port_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strSXT2PORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("SXT2PORT", Global.strSXT2PORT);
        }

        private void ComboBoxSXT3Port_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strSXT3PORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("SXT3PORT", Global.strSXT3PORT);
        }

        private void ComboBoxSXT4Port_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strSXT4PORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("SXT4PORT", Global.strSXT4PORT);
        }

        private void ComboBoxPRINTPort_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strPRINTPORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("PRINTPORT", Global.strPRINTPORT);
        }

        private void ButtonADPortTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonADPortTest.Content = "正在测试";
            ButtonADPortTest.IsEnabled = false;
            Test(ComboBoxADPort.Text);
        }

        private void ButtonSXT1PortTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonSXT1PortTest.Content = "正在测试";
            ButtonSXT1PortTest.IsEnabled = false;
            Test(ComboBoxSXT1Port.Text);
        }

        private void ButtonSXT2PorTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonSXT2PorTest.Content = "正在测试";
            ButtonSXT2PorTest.IsEnabled = false;
            Test(ComboBoxSXT2Port.Text);
        }

        private void ButtonSXT3PortTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonSXT3PortTest.Content = "正在测试";
            ButtonSXT3PortTest.IsEnabled = false;
            Test(ComboBoxSXT3Port.Text);
        }

        private void ButtonSXT4PorTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonSXT4PorTest.Content = "正在测试";
            ButtonSXT4PorTest.IsEnabled = false;
            Test(ComboBoxSXT4Port.Text);
        }

        private void ButtonPRINTPortTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonPRINTPortTest.Content = "正在测试";
            ButtonPRINTPortTest.IsEnabled = false;
            Test(ComboBoxPRINTPort.Text);
        }

        //通讯测试后还原按钮
        void IsEnabledTrue()
        {
            this.textCheckPlaceCode.Text = Global.setOrgNum;
            this.textBoxCheckNumber.Text = Global.setPointNum;
            this.textBoxCheckName.Text = Global.setPonitName;
            this.textBoxCheckType.Text = Global.setPointType;
            this.textBoxCheckOrg.Text = Global.setOrgName;
            ButtonADPortTest.Content = "通讯测试";
            ButtonADPortTest.IsEnabled = true;
            ButtonSXT1PortTest.Content = "通讯测试";
            ButtonSXT1PortTest.IsEnabled = true;
            ButtonSXT2PorTest.Content = "通讯测试";
            ButtonSXT2PorTest.IsEnabled = true;
            ButtonSXT3PortTest.Content = "通讯测试";
            ButtonSXT3PortTest.IsEnabled = true;
            ButtonSXT4PorTest.Content = "通讯测试";
            ButtonSXT4PorTest.IsEnabled = true;
            ButtonPRINTPortTest.Content = "通讯测试";
            ButtonPRINTPortTest.IsEnabled = true;
            ButtonHMPortTest.Content = "通讯测试";
            ButtonHMPortTest.IsEnabled = true;
            buttonServerTest.Content = "通讯测试";
            buttonServerTest.IsEnabled = true;
        }

        private void ButtonShowAD_Click(object sender, RoutedEventArgs e)
        {
            FgdShowADWindow window = new FgdShowADWindow();
            window.ShowInTaskbar = false; window.Owner = this; window.ShowDialog();
        }

        class MsgThread : ChildThread
        {
            SettingsWindow wnd;
            private delegate void UIHandleMessageDelegate(Message msg);
            private UIHandleMessageDelegate uiHandleMessageDelegate;

            public MsgThread(SettingsWindow wnd)
            {
                this.wnd = wnd;
                uiHandleMessageDelegate = new UIHandleMessageDelegate(UIHandleMessage);
            }

            protected override void HandleMessage(Message msg)
            {
                base.HandleMessage(msg);
                try
                {
                    wnd.Dispatcher.Invoke(uiHandleMessageDelegate, msg);
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                }
            }
            SettingsWindow settingWindow = new SettingsWindow();
            public void UIHandleMessage(Message msg)
            {
                switch (msg.what)
                {
                    case MsgCode.MSG_COMM_TEST:
                    case MsgCode.MSG_COMM_TEST_HM:
                        if (msg.result)
                        {
                            wnd.IsEnabledTrue();
                            wnd.SaveSetting();
                            MessageBox.Show("测试连接成功!", "提示");
                        }
                        else
                        {
                            wnd.IsEnabledTrue();
                            MessageBox.Show("测试连接失败!请重试!", "提示");
                        }
                        break;
                    //连接成功后，下载被检单位
                    case MsgCode.MSG_CHECK_CONNECTION:
                        if (msg.result)
                        {
                            wnd.IsEnabledTrue();
                            wnd.SaveSetting();
                            //wnd.DownCompany();
                            MessageBox.Show("测试连接成功!", "系统提示");
                        }
                        else
                        {
                            wnd.IsEnabledTrue();
                            MessageBox.Show("测试连接失败!\r\n\r\n异常提示：" + msg.error, "系统提示");
                        }
                        break;
                    case MsgCode.MSG_CHECK_SYNC:
                        if (!string.IsNullOrEmpty(msg.CheckItemsTempList))
                        {
                            try
                            {
                                wnd.DownStandard(msg.Standard);
                                wnd.DownCheckItems(msg.CheckItems);
                                wnd.DownLoadCheckItems(msg.CheckItemsTempList);
                                wnd.DownloadCompany(msg.DownLoadCompany);
                                wnd.DownloadStandDecide(msg.SampleStandardName);
                            }
                            catch (Exception e)
                            {
                                _checkedDown = false;
                                Console.WriteLine(e.Message);
                                wnd.changeCehckSync(true, "全部数据下载", 20);
                                MessageBox.Show("下载失败!请联系管理员!");
                            }
                            finally
                            {
                                wnd.changeCehckSync(true, "全部数据下载", 20);
                                if (_checkedDown)
                                {
                                    MessageBox.Show("全部数据下载成功！本次共下载：" +
                                        (wnd._DownCheckItemCount + wnd._DownStandardCount + wnd._YQCheckItemCount + wnd._DownCompanyCount + wnd._DownStandDecideCount) + "条数据！\r\n\r\n" +
                                        "检测标准：" + wnd._DownStandardCount + "条！\r\n" +
                                        "样品标准：" + wnd._DownStandDecideCount + "条！\r\n" +
                                        "检测项目：" + wnd._YQCheckItemCount + "条！\r\n" +
                                        "被检单位：" + wnd._DownCompanyCount + "条！\r\n" +
                                        "检测项目标准：" + wnd._DownCheckItemCount + "条！");
                                }
                            }
                        }
                        else
                        {
                            wnd.changeCehckSync(true, "全部数据下载", 20);
                            MessageBox.Show("下载数据错误,或者服务链接不正常，请联系管理员!", "操作提示");
                        }
                        break;
                    case MsgCode.MSG_DownCompany:
                        if (!string.IsNullOrEmpty(msg.DownLoadCompany))
                        {
                            try
                            {
                                wnd.DownloadCompany(msg.DownLoadCompany);
                            }
                            catch (Exception e)
                            {
                                _checkedDown = false;
                                Console.WriteLine(e.Message);
                                wnd.changeCompany(true, "被检单位下载");
                                MessageBox.Show(wnd, "下载时出现异常！\r\n异常信息：" + e.Message);
                            }
                            finally
                            {
                                if (_checkedDown && !Global.EachDistrict.Equals("GS"))
                                {
                                    wnd.changeCompany(true, "被检单位下载");
                                    MessageBox.Show("被检单位下载成功!\r\n\r\n本次共下载：" + wnd._DownCompanyCount + " 条数据!");
                                }
                            }
                        }
                        else
                        {
                            wnd.changeCompany(true, "被检单位下载");
                            MessageBox.Show("下载数据错误,或者服务链接不正常，请联系管理员!", "操作提示");
                        }
                        break;
                    case MsgCode.MSG_DownCheckItems:
                        if (!string.IsNullOrEmpty(msg.CheckItemsTempList))
                        {
                            try
                            {
                                wnd.DownLoadCheckItems(msg.CheckItemsTempList);
                            }
                            catch (Exception e)
                            {
                                _checkedDown = false;
                                Console.WriteLine(e.Message);
                                wnd.changeCheckItems(true, "检测项目下载");
                                MessageBox.Show("下载失败!请联系管理员!");
                            }
                            finally
                            {
                                wnd.changeCheckItems(true, "检测项目下载");
                                if (_checkedDown)
                                {
                                    MessageBox.Show("检测项目下载成功!\r\n\r\n本次共下载：" + wnd._YQCheckItemCount + " 条数据!");
                                }
                            }
                        }
                        else
                        {
                            wnd.changeCheckItems(true, "检测项目下载");
                            MessageBox.Show("下载数据错误,或者服务链接不正常，请联系管理员!", "操作提示");
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        /// <summary>
        /// 检测项目下载
        /// </summary>
        /// <param name="b"></param>
        /// <param name="str"></param>
        private void changeCheckItems(bool b, string str)
        {
            btnCheckItems.Content = str;
            btnCheckItems.IsEnabled = b;
        }

        /// <summary>
        /// 被检单位下载
        /// </summary>
        /// <param name="b"></param>
        /// <param name="str"></param>
        private void changeCompany(bool b, string str)
        {
            btnCompany.IsEnabled = b;
            btnCompany.Content = str;
        }

        private void changeCehckSync(bool b, string str, int size)
        {
            buttonCehckSync.Content = str;
            buttonCehckSync.IsEnabled = b;
            buttonCehckSync.FontSize = size;
        }

        private void Test(string port)
        {
            Message msg = new Message();
            msg.what = MsgCode.MSG_COMM_TEST;
            msg.str1 = port;
            Global.workThread.SendMessage(msg, _msgThread);
        }

        // 根据已有的检测孔的波长信息，生成检测孔波长配置。
        private UIElement GenerateHoleLEDSettingUI(int nHole)
        {
            StackPanel stackPanel = new StackPanel();
            stackPanel.Orientation = Orientation.Horizontal;
            stackPanel.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
            stackPanel.VerticalAlignment = System.Windows.VerticalAlignment.Top;
            Label labelHoleSetting = new Label();
            labelHoleSetting.Width = 140;
            labelHoleSetting.Height = 40;
            labelHoleSetting.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
            labelHoleSetting.VerticalAlignment = System.Windows.VerticalAlignment.Center;
            labelHoleSetting.VerticalContentAlignment = System.Windows.VerticalAlignment.Center;
            labelHoleSetting.Content = String.Format("检测孔{0:D2}配置:", (nHole + 1));
            labelHoleSetting.FontSize = 20;
            stackPanel.Children.Add(labelHoleSetting);
            for (int i = 0; i < Global.deviceHole.LedCount; ++i)
            {
                Label labelLEDWave = new Label();
                labelLEDWave.Width = 50;
                labelLEDWave.Height = 40;
                labelLEDWave.Margin = new Thickness(10, 0, 0, 0);
                labelLEDWave.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
                labelLEDWave.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                labelLEDWave.VerticalContentAlignment = System.Windows.VerticalAlignment.Center;
                labelLEDWave.Content = "LED" + (i + 1);
                labelLEDWave.FontSize = 20;
                ComboBox comboBoxLEDWave = new ComboBox();
                comboBoxLEDWave.Name = GetName(nHole, i);
                comboBoxLEDWave.Width = 80;
                comboBoxLEDWave.Height = 40;
                comboBoxLEDWave.VerticalAlignment = System.Windows.VerticalAlignment.Center;
                comboBoxLEDWave.VerticalContentAlignment = System.Windows.VerticalAlignment.Center;
                comboBoxLEDWave.FontSize = 20;
                comboBoxLEDWave.ItemsSource = DeviceProp.DeviceHole.TotalWaves;
                comboBoxLEDWave.IsEditable = true;
                comboBoxLEDWave.Text = "" + Global.deviceHole.LEDWave[nHole][i];
                stackPanel.Children.Add(labelLEDWave);
                stackPanel.Children.Add(comboBoxLEDWave);
            }
            return stackPanel;
        }

        private string GetName(int nHole, int nLed)
        {
            return "Hole" + nHole + "Led" + nLed;
        }

        private void GetLED(out int nHole, out int nLed, string name)
        {
            string[] strs = name.Split(new string[] { "Hole", "Led" }, StringSplitOptions.RemoveEmptyEntries);
            Int32.TryParse(strs[0], out nHole);
            Int32.TryParse(strs[1], out nLed);
        }

        // 寻找所有的combobox，按名称，将其内容保存。
        private void SaveHoleWaveSettings()
        {
            List<ComboBox> comboBoxes = UIUtils.GetChildObjects<ComboBox>(StackPanelLEDSettings, typeof(ComboBox));
            if (null == comboBoxes)
                return;
            foreach (ComboBox comboBox in comboBoxes)
            {
                int nHole, nLed;
                GetLED(out nHole, out nLed, comboBox.Name);
                try
                {
                    Int32.TryParse(comboBox.Text, out Global.deviceHole.LEDWave[nHole][nLed]);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                    FileUtils.Log(ex.ToString());
                }
            }
        }

        private void buttonServerTest_Click(object sender, RoutedEventArgs e)
        {
            if (!Global.IsConnectInternet())
            {
                MessageBox.Show(this, "设备无法连接到互联网，请检查网络！", "系统提示");
                return;
            }

            buttonServerTest.Content = "正在测试";
            buttonServerTest.IsEnabled = false;
            Message msg = new Message();
            msg.what = MsgCode.MSG_CHECK_CONNECTION;
            msg.str1 = textBoxServerAddr.Text;
            msg.str2 = textBoxRegisterID.Text;
            msg.str3 = textBoxRegisterPassword.Password;
            Global.workThread.SendMessage(msg, _msgThread);
        }

        /// <summary>
        /// 全部数据下载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void buttonCehckSync_Click(object sender, RoutedEventArgs e)
        {
            if (!Global.IsConnectInternet())
            {
                MessageBox.Show(this, "设备无法连接到互联网，请检查网络！", "系统提示");
                return;
            }
            try
            {
                changeCehckSync(false, "正在下载···", 20);
                _checkedDown = true;
                Message msg = new Message();
                msg.what = MsgCode.MSG_CHECK_SYNC;
                msg.str1 = textBoxServerAddr.Text;
                msg.str2 = textBoxRegisterID.Text;
                msg.str3 = textBoxRegisterPassword.Password;
                msg.args.Enqueue(textBoxCheckNumber.Text);
                msg.args.Enqueue(textBoxCheckName.Text);
                msg.args.Enqueue(textBoxCheckType.Text);
                msg.args.Enqueue(textBoxCheckOrg.Text);
                Global.workThread.SendMessage(msg, _msgThread);
            }
            catch (Exception ex)
            {
                MessageBox.Show("数据下载失败!请联系管理员!\n错误信息如下：" + ex.Message, "错误提示");
            }
        }

        private int _DownStandDecideCount = 0;
        private void DownStandardDecideTempProcess(Action<int> percent)
        {
            _DownStandDecideCount = 0;
            percent(0);
            try
            {
                if (StandardDecideTemp.Equals("") || StandardDecideTemp.Equals("<NewDataSet>\r\n</NewDataSet>"))
                    return;
                string delErr = string.Empty;
                string err = string.Empty;
                StringBuilder sb = new StringBuilder();
                DataSet dataSet = new DataSet();
                DataTable dtbl = new DataTable();
                using (StringReader sr = new StringReader(StandardDecideTemp))
                {
                    dataSet.ReadXml(sr);
                }

                int len = 0;
                if (dataSet != null)
                {
                    len = dataSet.Tables[0].Rows.Count;
                    dtbl = dataSet.Tables[0];
                }

                if (len == 0)
                {
                    return;
                }

                percent(5);
                float percentage1 = (float)95 / (float)len, percentage2 = 0;
                int count = (int)percentage1 + 5;
                clsttStandardDecide model = new clsttStandardDecide();
                model.UDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                for (int i = 0; i < len; i++)
                {
                    err = string.Empty;
                    model.FtypeNmae = dtbl.Rows[i]["FtypeNmae"].ToString();
                    model.SampleNum = dtbl.Rows[i]["SampleNum"].ToString();
                    model.Name = dtbl.Rows[i]["Name"].ToString();
                    model.ItemDes = dtbl.Rows[i]["ItemDes"].ToString();
                    model.StandardValue = dtbl.Rows[i]["StandardValue"].ToString();
                    model.Demarcate = dtbl.Rows[i]["Demarcate"].ToString();
                    model.Unit = dtbl.Rows[i]["Unit"].ToString();
                    _clsttStandardDecideOprBLL.InsertOrUpdate(model, out err);
                    if (!err.Equals(string.Empty)) sb.Append(err);
                    else _DownStandDecideCount++;

                    if (count < 100)
                    {
                        percent(count);
                        percentage2 += percentage1;
                        if (percentage2 > 1)
                        {
                            count += (int)percentage2;
                            percentage2 = 0;
                        }
                    }
                    else
                    {
                        count = 100;
                    }
                }
                if (sb.Length > 0)
                {
                    return;
                }
            }
            catch (Exception)
            {
                percent(100);
            }
            finally 
            {
                percent(100);
            }
        }

        /// <summary>
        /// 下载样品和检测项目关联判断标准值
        /// </summary>
        /// <param name="StandardDecideTemp"></param>
        /// <returns></returns>
        private void DownloadStandDecide(string data)
        {
            StandardDecideTemp = data;
            PercentProcess process = new PercentProcess();
            process.BackgroundWork = this.DownStandardDecideTempProcess;
            process.MessageInfo = "正在下载样品判定标准";
            process.Start();
        }

        /// <summary>
        /// 被检单位下载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void BtnCompany_Click(object sender, RoutedEventArgs e)
        {
            DownCompany();
        }

        private void DownCompany() 
        {
            if (!Global.IsConnectInternet())
            {
                MessageBox.Show(this, "设备无法连接到互联网，请检查网络！", "系统提示");
                return;
            }
            try
            {
                changeCompany(false, "正在下载···");
                _checkedDown = true;
                Message msg = new Message();
                msg.what = MsgCode.MSG_DownCompany;
                msg.str1 = textBoxServerAddr.Text;
                msg.str2 = textBoxRegisterID.Text;
                msg.str3 = textBoxRegisterPassword.Password;
                msg.args.Enqueue(textBoxCheckNumber.Text);
                msg.args.Enqueue(textBoxCheckName.Text);
                msg.args.Enqueue(textBoxCheckType.Text);
                msg.args.Enqueue(textBoxCheckOrg.Text);
                Global.workThread.SendMessage(msg, _msgThread);
            }
            catch (Exception ex)
            {
                FileUtils.Log(ex.ToString());
                MessageBox.Show("被检单位下载失败!请联系管理员!\n错误信息如下：" + ex.Message, "错误提示");
            }
        }

        private int _DownCompanyCount = 0;
        private void DownloadCompanyProcess(Action<int> percent)
        {
            _DownCompanyCount = 0;
            percent(0);
            try
            {
                if (!CompanyTemp.Equals("<NewDataSet>\r\n</NewDataSet>"))
                {
                    string delErr = string.Empty;
                    string err = string.Empty;
                    StringBuilder sb = new StringBuilder();
                    DataSet dataSet = new DataSet();
                    DataTable dtbl = new DataTable();
                    using (StringReader sr = new StringReader(CompanyTemp))
                    {
                        dataSet.ReadXml(sr);
                    }
                    int len = 0;
                    if (dataSet != null)
                    {
                        len = dataSet.Tables[0].Rows.Count;
                        dtbl = dataSet.Tables[0];
                    }
                    if (len == 0)
                    {
                        percent(100);
                        return;
                    }
                    percent(3);
                    clsCompany model = new clsCompany();
                    model.UDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                    float percentage1 = (float)97 / (float)len, percentage2 = 0;
                    int count = (int)percentage1 + 3;
                    for (int i = 0; i < len; i++)
                    {
                        err = string.Empty;
                        model.SysCode = dtbl.Rows[i]["SysCode"].ToString();
                        model.StdCode = dtbl.Rows[i]["StdCode"].ToString();
                        model.CAllow = dtbl.Rows[i]["LICENSEID"].ToString();
                        model.CompanyID = dtbl.Rows[i]["CompanyID"].ToString();
                        model.ISSUEAGENCY = dtbl.Rows[i]["ISSUEAGENCY"].ToString();
                        model.ISSUEDATE = dtbl.Rows[i]["ISSUEDATE"].ToString();
                        model.PERIODSTART = dtbl.Rows[i]["PERIODSTART"].ToString();
                        model.PERIODEND = dtbl.Rows[i]["PERIODEND"].ToString();
                        model.VIOLATENUM = dtbl.Rows[i]["VIOLATENUM"].ToString();
                        model.LONGITUDE = dtbl.Rows[i]["LONGITUDE"].ToString();
                        model.LATITUDE = dtbl.Rows[i]["LATITUDE"].ToString();
                        model.SCOPE = dtbl.Rows[i]["SCOPE"].ToString();
                        model.PUNISH = dtbl.Rows[i]["PUNISH"].ToString();
                        model.FullName = dtbl.Rows[i]["FullName"].ToString();
                        model.DisplayName = dtbl.Rows[i]["DisplayName"].ToString();
                        model.Property = dtbl.Rows[i]["Property"].ToString();
                        model.KindCode = dtbl.Rows[i]["KindCode"].ToString();
                        model.RegCapital = Convert.ToInt64(dtbl.Rows[i]["RegCapital"]);
                        model.Unit = dtbl.Rows[i]["Unit"].ToString();
                        model.Incorporator = dtbl.Rows[i]["Incorporator"].ToString();
                        if (!string.IsNullOrEmpty(dtbl.Rows[i]["RegDate"].ToString()))
                            model.RegDate = Convert.ToDateTime(dtbl.Rows[i]["RegDate"]);
                        model.DistrictCode = dtbl.Rows[i]["DistrictCode"].ToString();
                        model.PostCode = dtbl.Rows[i]["PostCode"].ToString();
                        model.Address = dtbl.Rows[i]["Address"].ToString();
                        model.LinkMan = dtbl.Rows[i]["LinkMan"].ToString();
                        model.LinkInfo = dtbl.Rows[i]["LinkInfo"].ToString();
                        model.CreditLevel = dtbl.Rows[i]["CreditLevel"].ToString();
                        model.CreditRecord = dtbl.Rows[i]["CreditRecord"].ToString();
                        model.ProductInfo = dtbl.Rows[i]["ProductInfo"].ToString();
                        model.OtherInfo = dtbl.Rows[i]["OtherInfo"].ToString();
                        model.FoodSafeRecord = dtbl.Rows[i]["FoodSafeRecord"].ToString();
                        model.CheckLevel = dtbl.Rows[i]["CheckLevel"].ToString();
                        model.IsReadOnly = Convert.ToBoolean(dtbl.Rows[i]["IsReadOnly"]);
                        model.IsLock = Convert.ToBoolean(dtbl.Rows[i]["IsLock"]);
                        model.Remark = dtbl.Rows[i]["Remark"].ToString();
                        model.TSign = dtbl.Rows[i]["Sign"].ToString();
                        _clsCompanyOprBLL.InsertOrUpdate(model, out err);
                        if (!err.Equals(string.Empty)) sb.Append(err);
                        else _DownCompanyCount++;

                        if (count < 100)
                        {
                            percent(count);
                            percentage2 += percentage1;
                            if (percentage2 > 1)
                            {
                                count += (int)percentage2;
                                percentage2 = 0;
                            }
                        }
                        else
                        {
                            count = 100;
                        }
                    }
                    if (sb.Length > 0)
                    {
                        percent(100);
                    }
                }
            }
            catch (Exception ex)
            {
                percent(100);
                MessageBox.Show(this, "下载被检单位时出现异常！\r\n异常信息：" + ex.Message, "系统提示");
            }
            finally
            {
                percent(100);
            }
        }

        /// <summary>
        /// 下载被检单位
        /// </summary>
        /// <param name="stdCode">标准代码</param>
        /// <param name="districtCode">区域编码</param>
        private void DownloadCompany(string data)
        {
            CompanyTemp = data;
            PercentProcess process = new PercentProcess();
            process.BackgroundWork = this.DownloadCompanyProcess;
            process.MessageInfo = "正在下载被检单位";
            //process.BackgroundWorkerCompleted += new EventHandler<BackgroundWorkerEventArgs>(backgroundWorkerCompleted);
            process.Start();
        }

        private int _DownStandardCount = 0;
        private void DownStandardProcess(Action<int> percent)
        {
            _DownStandardCount = 0;
            percent(0);
            try
            {
                if (!Standard.Equals("<NewDataSet>\r\n</NewDataSet>"))
                {
                    string err = string.Empty;
                    StringBuilder sb = new StringBuilder();
                    DataSet dataSet = new DataSet();
                    DataTable dtbl = new DataTable();
                    using (StringReader sr = new StringReader(Standard))
                    {
                        dataSet.ReadXml(sr);
                    }
                    int len = 0;
                    if (dataSet != null)
                    {
                        len = dataSet.Tables[0].Rows.Count;
                        dtbl = dataSet.Tables[0];
                    }
                    if (len == 0)
                    {
                        return;
                    }

                    percent(5);
                    float percentage1 = (float)95 / (float)len, percentage2 = 0;
                    int count = (int)percentage1 + 5;
                    clsStandard model = new clsStandard();
                    for (int i = 0; i < len; i++)
                    {
                        err = string.Empty;
                        model.SysCode = dtbl.Rows[i]["SysCode"].ToString();
                        model.StdCode = dtbl.Rows[i]["StdCode"].ToString();
                        model.StdDes = dtbl.Rows[i]["StdDes"].ToString();
                        model.ShortCut = dtbl.Rows[i]["ShortCut"].ToString();
                        model.StdInfo = dtbl.Rows[i]["StdInfo"].ToString();
                        model.StdType = dtbl.Rows[i]["StdType"].ToString();
                        model.IsReadOnly = Convert.ToBoolean(dtbl.Rows[i]["IsReadOnly"]);
                        model.IsLock = Convert.ToBoolean(dtbl.Rows[i]["IsLock"]);
                        model.Remark = dtbl.Rows[i]["Remark"].ToString();
                        model.UDate = dtbl.Rows[i]["UDate"].ToString();
                        if (_clsCompanyOprBLL.InsertOrUpdate(model, out err) == 1)
                            _DownStandardCount++;
                        else if (!err.Equals(string.Empty))
                            sb.Append(err);

                        if (count < 100)
                        {
                            percent(count);
                            percentage2 += percentage1;
                            if (percentage2 > 1)
                            {
                                count += (int)percentage2;
                                percentage2 = 0;
                            }
                        }
                        else
                        {
                            count = 100;
                        }
                    }
                }
            }
            catch (Exception)
            {
                percent(100);
            }
            finally 
            {
                percent(100);
            }
        }

        /// <summary>
        /// 检测标准下载
        /// </summary>
        /// <param name="standard"></param>
        private void DownStandard(string data) 
        {
            Standard = data;
            PercentProcess process = new PercentProcess();
            process.BackgroundWork = this.DownStandardProcess;
            process.MessageInfo = "正在下载检测标准";
            process.Start();
        }

        private int _DownCheckItemCount = 0;
        private void DownCheckItemsProcess(Action<int> percent)
        {
            _DownCheckItemCount = 0;
            percent(0);
            try
            {
                if (!chekcItmes.Equals("<NewDataSet>\r\n</NewDataSet>"))
                {
                    string err = string.Empty;
                    StringBuilder sb = new StringBuilder();
                    DataSet dataSet = new DataSet();
                    DataTable dtbl = new DataTable();
                    using (StringReader sr = new StringReader(chekcItmes))
                    {
                        dataSet.ReadXml(sr);
                    }
                    int len = 0;
                    if (dataSet != null)
                    {
                        len = dataSet.Tables[0].Rows.Count;
                        dtbl = dataSet.Tables[0];
                    }

                    percent(5);
                    float percentage1 = (float)95 / (float)len, percentage2 = 0;
                    int count = (int)percentage1 + 5;
                    if (len == 0)
                    {
                        MessageBox.Show("暂无任务!");
                        return;
                    }
                    clsCheckItem model = new clsCheckItem();
                    for (int i = 0; i < len; i++)
                    {
                        err = string.Empty;
                        model.SysCode = dtbl.Rows[i]["SysCode"].ToString();
                        model.StdCode = dtbl.Rows[i]["StdCode"].ToString();
                        model.ItemDes = dtbl.Rows[i]["ItemDes"].ToString();
                        model.CheckType = dtbl.Rows[i]["CheckType"].ToString();
                        model.StandardCode = dtbl.Rows[i]["StandardCode"].ToString();
                        model.StandardValue = dtbl.Rows[i]["StandardValue"].ToString();
                        model.Unit = dtbl.Rows[i]["Unit"].ToString();
                        model.DemarcateInfo = dtbl.Rows[i]["DemarcateInfo"].ToString();
                        model.TestValue = dtbl.Rows[i]["TestValue"].ToString();
                        model.OperateHelp = dtbl.Rows[i]["OperateHelp"].ToString();
                        model.CheckLevel = dtbl.Rows[i]["CheckLevel"].ToString();
                        model.IsReadOnly = Convert.ToBoolean(dtbl.Rows[i]["IsReadOnly"]);
                        model.IsLock = Convert.ToBoolean(dtbl.Rows[i]["IsLock"]);
                        model.Remark = dtbl.Rows[i]["Remark"].ToString();
                        model.UDate = dtbl.Rows[i]["UDate"].ToString();
                        if (_clsCompanyOprBLL.InsertOrUpdate(model, out err) == 1)
                            _DownCheckItemCount += 1;
                        else if (!err.Equals(string.Empty))
                            sb.Append(err);

                        if (count < 100)
                        {
                            percent(count);
                            percentage2 += percentage1;
                            if (percentage2 > 1)
                            {
                                count += (int)percentage2;
                                percentage2 = 0;
                            }
                        }
                        else
                        {
                            count = 100;
                        }
                    }
                }
            }
            catch (Exception)
            {
                percent(100);
            }
            finally 
            {
                percent(100);
            }
        }

        /// <summary>
        /// 检测项目标准下载
        /// </summary>
        /// <param name="chekcItmes"></param>
        private void DownCheckItems(string data)
        {
            chekcItmes = data;
            PercentProcess process = new PercentProcess();
            process.BackgroundWork = this.DownCheckItemsProcess;
            process.MessageInfo = "正在下载检测项目标准";
            process.Start();
        }

        /// <summary>
        /// 仪器检测项目下载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCheckItems_Click(object sender, RoutedEventArgs e)
        {
            if (!Global.IsConnectInternet())
            {
                MessageBox.Show(this, "设备无法连接到互联网，请检查网络！", "系统提示");
                return;
            }
            try
            {
                changeCheckItems(false, "正在下载···");
                //CheckItemsDown(0, 0, "0");
                _checkedDown = true;
                Message msg = new Message();
                msg.what = MsgCode.MSG_DownCheckItems;
                msg.str1 = textBoxServerAddr.Text;
                msg.str2 = textBoxRegisterID.Text;
                msg.str3 = textBoxRegisterPassword.Password;
                msg.args.Enqueue(textBoxCheckNumber.Text);
                msg.args.Enqueue(textBoxCheckName.Text);
                msg.args.Enqueue(textBoxCheckType.Text);
                msg.args.Enqueue(textBoxCheckOrg.Text);
                Global.workThread.SendMessage(msg, _msgThread);
            }
            catch (Exception ex)
            {
                FileUtils.Log(ex.ToString());
                MessageBox.Show("检测项目下载失败!请联系管理员!\n错误信息如下：" + ex.Message, "错误提示");
            }
        }

        private int _YQCheckItemCount = 0;
        private void DownLoadCheckItemsProcess(Action<int> percent)
        {
            _YQCheckItemCount = 0;
            percent(0);
            try
            {
                if (CheckItems != null && !CheckItems.Equals("<NewDataSet>\r\n没有相关的数据下载!\r\n</NewDataSet>"))
                {
                    MainWindow._TempItemNames = _serialArry;
                    percent(5);
                    using (StringReader sr = new StringReader(CheckItems))
                    {
                        DataSet dataSet = new DataSet();
                        dataSet.ReadXml(sr);
                        int len = dataSet.Tables[0].Rows.Count;
                        float percentage1 = (float)95 / (float)len, percentage2 = 0;
                        int count = (int)percentage1 + 5;
                        if (dataSet.Tables[0].Rows.Count > 0)
                        {
                            List<CHECKITEMS> ItemNames = (List<CHECKITEMS>)IListDataSet.DataSetToIList<CHECKITEMS>(dataSet, 0);
                            foreach (DataRow CheckType in dataSet.Tables[0].Rows)
                            {
                                string[] Provisional = new string[15];
                                for (int Q = 0; Q <= 13; Q++)
                                {
                                    Provisional[Q] = CheckType[Q].ToString();
                                }
                                string TypeName = CheckType[10].ToString();
                                SaveResultValue(TypeName, Provisional);
                                
                                if (count < 100)
                                {
                                    percent(count);
                                    percentage2 += percentage1;
                                    if (percentage2 > 1)
                                    {
                                        count += (int)percentage2;
                                        percentage2 = 0;
                                    }
                                }
                                else
                                {
                                    count = 100;
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                percent(100);
            }
            finally 
            {
                percent(100);
            }
        }

        /// <summary>
        /// 下载检测项目
        /// </summary>
        /// <param name="data"></param>
        private void DownLoadCheckItems(string data)
        {
            CheckItems = data;
            PercentProcess process = new PercentProcess();
            process.BackgroundWork = this.DownLoadCheckItemsProcess;
            process.MessageInfo = "正在下载检测项目";
            //process.BackgroundWorkerCompleted += new EventHandler<BackgroundWorkerEventArgs>(backgroundWorkerCompleted);
            process.Start();
        }

        /// <summary>
        /// 分光光度检测项目保存
        /// </summary>
        /// <param name="ArryTemp"></param>
        private void saveFgdResult(string[] ArryTemp)
        {
            try
            {
                DYFGDItemPara item = new DYFGDItemPara();
                item.Name = ArryTemp[0].ToString();//项目名称
                item.Unit = ArryTemp[3].ToString();//项目检测单位
                item.HintStr = ArryTemp[4].ToString();//简要操作:新添加实验--注释
                item.Password = ArryTemp[5].ToString();//密码
                Int32.TryParse(ArryTemp[6].ToString(), out item.SampleNum);//样品编号
                Int32.TryParse(ArryTemp[11].ToString(), out item.Wave);//波长
                //检测方法选择
                item.Method = Convert.ToInt32(ArryTemp[12].ToString());
                Global.fgdItems.Add(item);
                Global.SerializeToFile(Global.fgdItems, Global.fgdItemsFile);
            }
            catch (Exception)
            {
                return;
            }
            _YQCheckItemCount++;
        }

        /// <summary>
        /// 胶体金检测项目保存
        /// </summary>
        /// <param name="ArryTemp"></param>
        private void saveJtjResult(string[] ArryTemp) 
        {
            try
            {
                DYJTJItemPara item = new DYJTJItemPara();
                item.Name = ArryTemp[0].ToString();//项目名称
                item.Unit = ArryTemp[3].ToString();//项目检测单位
                item.HintStr = ArryTemp[4].ToString();//简要操作：新添加实验--注释
                item.Password = ArryTemp[5].ToString();//密码
                Int32.TryParse(ArryTemp[6].ToString(), out item.SampleNum);//样品编号
                //Int32.TryParse(JTJItemNameType[9].ToString(), out item.Wave);//波长
                //检测方法选择
                item.Method = Convert.ToInt32(ArryTemp[12].ToString());
                item.Hole[0].Use = Convert.ToBoolean(ArryTemp[8].ToString());
                item.Hole[1].Use = Convert.ToBoolean(ArryTemp[9].ToString());
                item.Hole[2].Use = true;
                item.Hole[3].Use = true;
                item.InvalidC = Convert.ToInt32(ArryTemp[7].ToString());
                Global.jtjItems.Add(item);
                Global.SerializeToFile(Global.jtjItems, Global.jtjItemsFile);
            }
            catch (Exception)
            {
                return;
            }
            _YQCheckItemCount++;
        }

        /// <summary>
        /// 干化学检测项目保存
        /// </summary>
        /// <param name="ArryTemp"></param>
        private void saveGszResult(string[] ArryTemp)
        {
            try
            {
                DYGSZItemPara item = new DYGSZItemPara();
                item.Name = ArryTemp[0].ToString();//项目名称
                item.Unit = ArryTemp[3].ToString();//项目检测单位
                item.HintStr = ArryTemp[4].ToString();//简要提示:新添加实验--注释
                item.Password = ArryTemp[5].ToString();//密码
                Int32.TryParse(ArryTemp[6].ToString(), out item.SampleNum);//样品编号
                //检测方法选择
                item.Method = Convert.ToInt32(ArryTemp[12].ToString());
                item.Hole[0].Use = Convert.ToBoolean(ArryTemp[8].ToString());
                item.Hole[1].Use = Convert.ToBoolean(ArryTemp[9].ToString());
                item.Hole[2].Use = true;
                item.Hole[3].Use = true;
                Global.gszItems.Add(item);
                Global.SerializeToFile(Global.gszItems, Global.gszItemsFile);
            }
            catch (Exception)
            {
                return;
            }
            _YQCheckItemCount++;
        }

        /// <summary>
        /// 重金属检测项目保存
        /// </summary>
        /// <param name="ArryTemp"></param>
        private void saveZjsResult(string[] ArryTemp)
        {
            try
            {
                DYHMItemPara item = new DYHMItemPara();
                item.Name = ArryTemp[0].ToString();//项目名称
                item.Unit = ArryTemp[3].ToString();//项目检测单位
                item.HintStr = ArryTemp[4].ToString();//简要操作：新添加实验--注释
                item.Password = ArryTemp[5].ToString();//密码
                Int32.TryParse(ArryTemp[6].ToString(), out item.SampleNum);//样品编号
                //检测方法选择
                item.Method = Convert.ToInt32(ArryTemp[12].ToString());
                item.Hole[0].Use = Convert.ToBoolean(ArryTemp[8].ToString());
                item.Hole[1].Use = Convert.ToBoolean(ArryTemp[9].ToString());
                Global.hmItems.Add(item);
                Global.SerializeToFile(Global.hmItems, Global.hmItemsFile);
            }
            catch (Exception)
            {
                return;
            }
            _YQCheckItemCount++;
        }

        public void SaveResultValue(string ChoiceAndSelect, string[] ArryTemp)
        {
            switch (ChoiceAndSelect)
            {
                case "分光光度":
                    saveFgdResult(ArryTemp);
                    //FgdEditItemWindow FGD = new FgdEditItemWindow();
                    //FGD._FGDItemNameType = ArryTemp;
                    //FGD.ButtonNext_Click(null, null);
                    break;
                case "胶体金":
                    saveJtjResult(ArryTemp);
                    //JtjEditItemWindow JTJ = new JtjEditItemWindow();
                    //JTJ._JTJItemNameType = ArryTemp;
                    //JTJ.ButtonNext_Click(null, null);
                    break;
                case "干化学法":
                    saveGszResult(ArryTemp);
                    //GszEditItemWindow GSZ = new GszEditItemWindow();
                    //GSZ._GSZItemNameType = ArryTemp;
                    //GSZ.ButtonNext_Click(null, null);
                    break;
                case "重金属":
                    saveZjsResult(ArryTemp);
                    //HmEditItemWindow ZJS = new HmEditItemWindow();
                    //ZJS._HmMetailArry = ArryTemp;
                    //ZJS.ButtonNext_Click(null, null);
                    break;
            }
        }

        private void ComboBoxHMPort_DropDownClosed(object sender, EventArgs e)
        {
            ComboBox comboBoxPort = (ComboBox)sender;
            Global.strHMPORT = comboBoxPort.Text;
            CFGUtils.SaveConfig("HMPORT", Global.strHMPORT);
        }

        private void ButtonHMPortTest_Click(object sender, RoutedEventArgs e)
        {
            ButtonHMPortTest.Content = "正在测试";
            ButtonHMPortTest.IsEnabled = false;
            Message msg = new Message();
            msg.what = MsgCode.MSG_COMM_TEST_HM;
            msg.str1 = ComboBoxHMPort.Text;
            Global.workThread.SendMessage(msg, _msgThread);
        }

        private void BtnCheckError_Click(object sender, RoutedEventArgs e)
        {
            ShowError window = new ShowError();
            window.ShowInTaskbar = false; window.Owner = this; window.ShowDialog();
        }

        private void btn_SaveDeviceId_Click(object sender, RoutedEventArgs e)
        {
            String str = tb_DeviceId.Text.Trim();
            if (str.Length == 0)
            {
                MessageBox.Show("设备唯一码不能为空!", "系统提示");
                tb_DeviceId.Focus();
                return;
            }

            Wisdom.DeviceID = str;
            CFGUtils.SaveConfig("DeviceId", Wisdom.DeviceID);
            MessageBox.Show("唯一机器码设置成功!");
            btn_SaveDeviceId.IsEnabled = false;
            tb_DeviceId.IsReadOnly = true;
        }

        private void btn_settingZH_Click(object sender, RoutedEventArgs e)
        {
            SettingUsrAndPwd window = new SettingUsrAndPwd();
            window.ShowDialog();
        }

    }
}
