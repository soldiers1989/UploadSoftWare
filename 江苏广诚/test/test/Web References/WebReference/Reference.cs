//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace test.WebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DatRockServiceSoapBinding", Namespace="http://service.food.chengyun.com/")]
    public partial class DatRockService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getDepartmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBoothOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadDataDockOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadDataDockksOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DatRockService() {
            this.Url = global::test.Properties.Settings.Default.test_WebReference_DatRockService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getDepartmentCompletedEventHandler getDepartmentCompleted;
        
        /// <remarks/>
        public event getBoothCompletedEventHandler getBoothCompleted;
        
        /// <remarks/>
        public event getUserCompletedEventHandler getUserCompleted;
        
        /// <remarks/>
        public event getCompanyCompletedEventHandler getCompanyCompleted;
        
        /// <remarks/>
        public event uploadDataDockCompletedEventHandler uploadDataDockCompleted;
        
        /// <remarks/>
        public event uploadDataDockksCompletedEventHandler uploadDataDockksCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.food.chengyun.com/", ResponseNamespace="http://service.food.chengyun.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getDepartment([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token) {
            object[] results = this.Invoke("getDepartment", new object[] {
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getDepartmentAsync(string token) {
            this.getDepartmentAsync(token, null);
        }
        
        /// <remarks/>
        public void getDepartmentAsync(string token, object userState) {
            if ((this.getDepartmentOperationCompleted == null)) {
                this.getDepartmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDepartmentOperationCompleted);
            }
            this.InvokeAsync("getDepartment", new object[] {
                        token}, this.getDepartmentOperationCompleted, userState);
        }
        
        private void OngetDepartmentOperationCompleted(object arg) {
            if ((this.getDepartmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDepartmentCompleted(this, new getDepartmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.food.chengyun.com/", ResponseNamespace="http://service.food.chengyun.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getBooth([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token) {
            object[] results = this.Invoke("getBooth", new object[] {
                        id,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getBoothAsync(string id, string token) {
            this.getBoothAsync(id, token, null);
        }
        
        /// <remarks/>
        public void getBoothAsync(string id, string token, object userState) {
            if ((this.getBoothOperationCompleted == null)) {
                this.getBoothOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBoothOperationCompleted);
            }
            this.InvokeAsync("getBooth", new object[] {
                        id,
                        token}, this.getBoothOperationCompleted, userState);
        }
        
        private void OngetBoothOperationCompleted(object arg) {
            if ((this.getBoothCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBoothCompleted(this, new getBoothCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.food.chengyun.com/", ResponseNamespace="http://service.food.chengyun.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getUser([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string username, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string password) {
            object[] results = this.Invoke("getUser", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getUserAsync(string username, string password) {
            this.getUserAsync(username, password, null);
        }
        
        /// <remarks/>
        public void getUserAsync(string username, string password, object userState) {
            if ((this.getUserOperationCompleted == null)) {
                this.getUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserOperationCompleted);
            }
            this.InvokeAsync("getUser", new object[] {
                        username,
                        password}, this.getUserOperationCompleted, userState);
        }
        
        private void OngetUserOperationCompleted(object arg) {
            if ((this.getUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCompleted(this, new getUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.food.chengyun.com/", ResponseNamespace="http://service.food.chengyun.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getCompany([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string id, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token) {
            object[] results = this.Invoke("getCompany", new object[] {
                        id,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCompanyAsync(string id, string token) {
            this.getCompanyAsync(id, token, null);
        }
        
        /// <remarks/>
        public void getCompanyAsync(string id, string token, object userState) {
            if ((this.getCompanyOperationCompleted == null)) {
                this.getCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCompanyOperationCompleted);
            }
            this.InvokeAsync("getCompany", new object[] {
                        id,
                        token}, this.getCompanyOperationCompleted, userState);
        }
        
        private void OngetCompanyOperationCompleted(object arg) {
            if ((this.getCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCompanyCompleted(this, new getCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.food.chengyun.com/", ResponseNamespace="http://service.food.chengyun.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string uploadDataDock([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string data, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token) {
            object[] results = this.Invoke("uploadDataDock", new object[] {
                        data,
                        token});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadDataDockAsync(string data, string token) {
            this.uploadDataDockAsync(data, token, null);
        }
        
        /// <remarks/>
        public void uploadDataDockAsync(string data, string token, object userState) {
            if ((this.uploadDataDockOperationCompleted == null)) {
                this.uploadDataDockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadDataDockOperationCompleted);
            }
            this.InvokeAsync("uploadDataDock", new object[] {
                        data,
                        token}, this.uploadDataDockOperationCompleted, userState);
        }
        
        private void OnuploadDataDockOperationCompleted(object arg) {
            if ((this.uploadDataDockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadDataDockCompleted(this, new uploadDataDockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.food.chengyun.com/", ResponseNamespace="http://service.food.chengyun.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string uploadDataDockks(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string sampNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detComp, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string boothNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string linkman, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string phone, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string busLicense, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string category, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string sampleName, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string testItem, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string standardVal, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detection, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detectionCom, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detResult, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detGist, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detDate, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string inspector, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string samplefee, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string department, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string detRoom, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string equipment, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string productionCom, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string producDate, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string processing, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string company, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string arg24) {
            object[] results = this.Invoke("uploadDataDockks", new object[] {
                        sampNumber,
                        detComp,
                        boothNumber,
                        linkman,
                        phone,
                        busLicense,
                        category,
                        sampleName,
                        testItem,
                        standardVal,
                        detection,
                        detectionCom,
                        detResult,
                        detGist,
                        detDate,
                        inspector,
                        samplefee,
                        department,
                        detRoom,
                        equipment,
                        productionCom,
                        producDate,
                        processing,
                        company,
                        arg24});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void uploadDataDockksAsync(
                    string sampNumber, 
                    string detComp, 
                    string boothNumber, 
                    string linkman, 
                    string phone, 
                    string busLicense, 
                    string category, 
                    string sampleName, 
                    string testItem, 
                    string standardVal, 
                    string detection, 
                    string detectionCom, 
                    string detResult, 
                    string detGist, 
                    string detDate, 
                    string inspector, 
                    string samplefee, 
                    string department, 
                    string detRoom, 
                    string equipment, 
                    string productionCom, 
                    string producDate, 
                    string processing, 
                    string company, 
                    string arg24) {
            this.uploadDataDockksAsync(sampNumber, detComp, boothNumber, linkman, phone, busLicense, category, sampleName, testItem, standardVal, detection, detectionCom, detResult, detGist, detDate, inspector, samplefee, department, detRoom, equipment, productionCom, producDate, processing, company, arg24, null);
        }
        
        /// <remarks/>
        public void uploadDataDockksAsync(
                    string sampNumber, 
                    string detComp, 
                    string boothNumber, 
                    string linkman, 
                    string phone, 
                    string busLicense, 
                    string category, 
                    string sampleName, 
                    string testItem, 
                    string standardVal, 
                    string detection, 
                    string detectionCom, 
                    string detResult, 
                    string detGist, 
                    string detDate, 
                    string inspector, 
                    string samplefee, 
                    string department, 
                    string detRoom, 
                    string equipment, 
                    string productionCom, 
                    string producDate, 
                    string processing, 
                    string company, 
                    string arg24, 
                    object userState) {
            if ((this.uploadDataDockksOperationCompleted == null)) {
                this.uploadDataDockksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadDataDockksOperationCompleted);
            }
            this.InvokeAsync("uploadDataDockks", new object[] {
                        sampNumber,
                        detComp,
                        boothNumber,
                        linkman,
                        phone,
                        busLicense,
                        category,
                        sampleName,
                        testItem,
                        standardVal,
                        detection,
                        detectionCom,
                        detResult,
                        detGist,
                        detDate,
                        inspector,
                        samplefee,
                        department,
                        detRoom,
                        equipment,
                        productionCom,
                        producDate,
                        processing,
                        company,
                        arg24}, this.uploadDataDockksOperationCompleted, userState);
        }
        
        private void OnuploadDataDockksOperationCompleted(object arg) {
            if ((this.uploadDataDockksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadDataDockksCompleted(this, new uploadDataDockksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getDepartmentCompletedEventHandler(object sender, getDepartmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDepartmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDepartmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getBoothCompletedEventHandler(object sender, getBoothCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBoothCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBoothCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getUserCompletedEventHandler(object sender, getUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void getCompanyCompletedEventHandler(object sender, getCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void uploadDataDockCompletedEventHandler(object sender, uploadDataDockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadDataDockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadDataDockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void uploadDataDockksCompletedEventHandler(object sender, uploadDataDockksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadDataDockksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadDataDockksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591